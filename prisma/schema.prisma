// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType{
  Superadmin
  Admin
  User
}

enum SubscriptionType{
Free
Professional_monthly
Professional_yearly
Premium_monthly
Premium_yearly
}

model Activity {
  id           Int           @id @default(autoincrement())
  userId               Int        // Reference to User
  name         String
}

model Group {
  id           Int           @id @default(autoincrement())
  userId               Int        // Reference to User
  name         String
}

model Task {
  id                Int           @id @default(autoincrement())
  userId            Int 
  name              String?       
  groupName         String
  groupId           Int
  activityName      String
  activityId        Int
  member            String
  dueDate           String
  type              String
  location         String?
}

model User {
  id                 Int              @id @default(autoincrement())
  name               String?
  email              String           @unique
  password           String?
  userType           UserType
  link               String?
  subscriptionType   SubscriptionType
  lastPaymentDate         DateTime?     
  cancellationReason      String?     
  otp                String?          // OTP field
  otpExpiration      DateTime?        // OTP expiration time
  subscriptions       Subscription[]
}

model Subscription {
  id                   Int        @id @default(autoincrement())
  userId               Int        // Reference to User
  razorpayCustomerId   String     // Razorpay Customer ID
  planId               String     // ID of the subscription plan
  startDate            DateTime   @default(now())
  endDate              DateTime?  // When the subscription expires
  amount               Int        // Subscription amount
  status               String     // Active, Inactive, etc.
  autoRenew            Boolean    @default(true) // Indicates if the subscription is auto-renewable
  renewalCount         Int        @default(0) // Track the number of renewals
  user                 User       @relation(fields: [userId], references: [id])
  payments            Payment[]
}
model Payment {
  id            Int        @id @default(autoincrement())
  subscriptionId Int       // Reference to the Subscription
  amount        Int        // Amount paid
  paymentDate   DateTime   @default(now()) // Date of the payment
  status        String     // Success, Failed, etc.
  razorpayPaymentId String? // ID from Razorpay for tracking purposes
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
}

model Link {
  id             Int     @id @default(autoincrement())
  link           String  @unique
  owner          String?
  taskname       String?
  member         String?
  group          String?
  duedate        String?
  completeddate  String?
  location       String?
  freecount      Int     @default(5)  // ðŸ‘ˆ Default value added
  subscription   String? 
}

model paidmemberdata {
  id       Int    @id @default(autoincrement())
  link     String
  otp      String
  otpcount Int    @default(1)
}



model Ad {
  id         Int      @id @default(autoincrement())
  contentUrl String   // URL for the image or video
  startDate  DateTime // Ad start date
  endDate    DateTime // Ad end date
  createdAt  DateTime @default(now()) // Timestamp for when the ad was created
  updatedAt  DateTime @updatedAt      // Auto-updated timestamp for changes
}

